name: Build

on:
  workflow_run:
    workflows: ["Init"]
    types:
      - completed

jobs:
  linux-x64:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java: [ 16, 16.0.1 ]
    steps:
      - name: Install packages
        run: sudo apt install axel libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev xdg-utils libc6 xdg-utils zlib1g libpng16-16 libasound2 libbsd-dev zip libblkid1 libdbus-1-3 libexpat1 libgpg-error0 liblzma5 libmount1 libpcre3 libselinux1 libsystemd0 libuuid1
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: adopt
          architecture: x64
      - name: Setup JavaFX
        run: |
          cd /tmp
          axel -n 8 https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+14_linux-x64_bin-jmods.zip
          unzip /tmp/openjfx-17-ea+14_linux-x64_bin-jmods.zip -d /tmp
      - name: Download GraalVM 21.1.0
        run: |
          cd /tmp
          axel -n 8 https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-linux-amd64-21.1.0.tar.gz
          tar -xvzf *.gz
      - name: Install native-image
        run: |
          cd /tmp/graalvm-ce-java11-21.1.0/bin
          ./gu install native-image
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Download build-date
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: build-date
          path: src/main/resources/com/stream_pi/client/
      - name: Create Linux x64 DEB, Linux x64 APP IMAGE, Linux x64 RPM
        run: |
          # Create DEB
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version ${{ env.VERSION }} \
          --linux-menu-group "Stream-Pi" \
          --license-file LICENSE.txt \
          --type deb

          # Create App Image
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version ${{ env.VERSION }} \
          --type app-image

          NEW_V=${{ env.VERSION }}
          NEW_V=${NEW_V//-/_}

          # Create RPM
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --license-file LICENSE.txt \
          --app-version $NEW_V \
          --type rpm

          cd $INSTALL_DIR
          mv *.deb stream-pi-client-linux-x64-${{ env.VERSION }}.deb
          mv *.rpm stream-pi-client-linux-x64-${{ env.VERSION }}.rpm

          mv 'Stream-Pi Client' stream-pi-client
          zip -r stream-pi-client-linux-x64-${{ env.VERSION }}-executable.zip stream-pi-client
          rm -r stream-pi-client
        env:
          MAIN_CLASS: com.stream_pi.client.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-17/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
      - name: Saving Linux x64 DEB
        uses: actions/upload-artifact@v2
        with:
          name: linux-deb-x64
          path: target/install/stream-pi-client-linux-x64-${{ env.VERSION }}.deb
      - name: Saving Linux x64 RPM
        uses: actions/upload-artifact@v2
        with:
          name: linux-rpm-x64
          path: target/install/stream-pi-client-linux-x64-${{ env.VERSION }}.rpm
      - name: Saving Linux x64 ZIP
        uses: actions/upload-artifact@v2
        with:
          name: linux-zip-x64
          path: target/install/stream-pi-client-linux-x64-${{ env.VERSION }}-executable.zip

  android-aarch64:
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: sudo apt install axel libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev xdg-utils libc6 xdg-utils zlib1g libpng16-16 libasound2 libbsd-dev zip libblkid1 libdbus-1-3 libexpat1 libgpg-error0 liblzma5 libmount1 libpcre3 libselinux1 libsystemd0 libuuid1
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: adopt
          architecture: x64
      - name: Setup JavaFX
        run: |
          cd /tmp
          axel -n 8 https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+14_linux-x64_bin-jmods.zip
          unzip /tmp/openjfx-17-ea+14_linux-x64_bin-jmods.zip -d /tmp
      - name: Download GraalVM 21.1.0
        run: |
          cd /tmp
          axel -n 8 https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-linux-amd64-21.1.0.tar.gz
          tar -xvzf *.gz
      - name: Install native-image
        run: |
          cd /tmp/graalvm-ce-java11-21.1.0/bin
          ./gu install native-image
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Download build-date
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: build-date
          path: src/main/resources/com/stream_pi/client/
      - name: Create Android aarch64 APK
        run: |
          export GRAALVM_HOME=/tmp/graalvm-ce-java11-21.1.0/
          export ANDROID_SDK_ROOT=$HOME/.gluon/substrate/Android/

          #Build aarch64 android native-image
          mvn -Pandroid gluonfx:build gluonfx:package

          # Use modded MainActivity to prevent sleep
          rm -rf target/gluonfx/aarch64-android/gvm/android_project/app/src/main/java/com/gluonhq/helloandroid/MainActivity.java
          mv src/android/mods/MainActivity.java target/gluonfx/aarch64-android/gvm/android_project/app/src/main/java/com/gluonhq/helloandroid/MainActivity.java

          # Create modded APK to prevent sleep
          pushd .
          cd target/gluonfx/aarch64-android/gvm/android_project
          ./gradlew assembleDebug
          popd

          mv target/gluonfx/aarch64-android/gvm/android_project/app/build/outputs/apk/debug/app-debug.apk ${{ env.INSTALL_DIR }}/stream-pi-client-android-aarch64-${{ env.VERSION }}.apk
        env:
          MAIN_CLASS: com.stream_pi.client.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-17/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/
      - name: Saving Android aarch64 APK
        uses: actions/upload-artifact@v2
        with:
          name: android-apk-aarch64
          path: target/*.apk
  
  macos-x64:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: adopt
          architecture: x64
      - name: Setup JavaFX
        run: |
          wget -P /tmp https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+14_osx-x64_bin-jmods.zip
          unzip /tmp/openjfx-17-ea+14_osx-x64_bin-jmods.zip -d /tmp
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Create PKG
        run: |
          # Create PKG
          .github/scripts/jpackage.sh \
          --icon assets/macos-icon.icns \
          --license-file LICENSE.txt \
          --mac-package-identifier stream-pi-client \
          --type pkg

          cd $INSTALL_DIR
          mv *.pkg stream-pi-client-macos-x64-${{ env.VERSION }}.pkg
        env:
          MAIN_CLASS: com.stream_pi.client.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-17/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
      - name: Saving MacOS x64 PKG
        uses: actions/upload-artifact@v2
        with:
          name: macos-pkg-x64
          path: target/install/stream-pi-client-macos-x64-${{ env.VERSION }}.pkg

  windows-x64:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: adopt
          architecture: x64
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Setup JavaFX
        run: |
          curl.exe -o D:\openjfx-17-ea+14_windows-x64_bin-jmods.zip https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+14_windows-x64_bin-jmods.zip
          Expand-Archive -Force D:\openjfx-17-ea+14_windows-x64_bin-jmods.zip D:\
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Create Bundle using JPackage
        id: project
        shell: cmd
        run: |
          call .github\scripts\jpackage.bat
        env:
          MAIN_CLASS: com.stream_pi.client.Main
          JAVAFX_JMODS: D:\javafx-jmods-17\
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
          ARCH: x64
      - name: Saving Windows x64 EXE
        uses: actions/upload-artifact@v2
        with:
          name: windows-msi-x64
          path: target/install/*.msi

  linux-arm32:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2.1.0
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - uses: uraimo/run-on-arch-action@v2.0.10
        name: Build & save Linux ARM32 ZIP
        with:
          arch: armv6
          distro: buster

          run: |
            sudo apt update
            sudo apt install axel unzip zip

            VERSION=$(<version.txt)
            INSTALL_DIR=target/install
            mkdir -p $INSTALL_DIR
            mv target/lib/* $INSTALL_DIR
            axel -n 8 https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+14_linux-arm32_bin-sdk.zip
            unzip openjfx-17-ea+14_linux-arm32_bin-sdk.zip -d javafx-sdk-arm32
            mv javafx-sdk-arm32/javafx-sdk-17/legal javafx-sdk-arm32/javafx-sdk-17/javafx-legal

            # Use Debug libgluon
            mv javafx-sdk-arm32/javafx-sdk-17/lib/libgluon_drm_debug-1.1.6.so javafx-sdk-arm32/javafx-sdk-17/lib/libgluon_drm.so
            rm -rf javafx-sdk-arm32/javafx-sdk-17/lib/libgluon_drm-1.1.6.so

            # Use Non Debug libgluon
            # mv javafx-sdk-arm32/javafx-sdk-17/lib/libgluon_drm-1.1.6.so javafx-sdk-arm32/javafx-sdk-17/lib/libgluon_drm.so
            # rm -rf javafx-sdk-arm32/javafx-sdk-17/lib/libgluon_drm_debug-1.1.6.so

            mv javafx-sdk-arm32/javafx-sdk-17/lib/* $INSTALL_DIR/
            cp assets/launchers/arm32-jvm/run_console $INSTALL_DIR/run_console
            cp assets/launchers/arm32-jvm/run_desktop $INSTALL_DIR/run_desktop
            cp assets/linux-icon.png $INSTALL_DIR/app-icon.png
            chmod +x $INSTALL_DIR/run_desktop
            chmod +x $INSTALL_DIR/run_console

            #Download jdk
            axel -n 8 https://cdn.azul.com/zulu-embedded/bin/zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf.tar.gz
            tar -xvzf zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf.tar.gz

            #Run jpackage
            zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf/bin/jlink  --no-header-files --no-man-pages --add-modules java.base,java.logging,java.net.http,java.scripting,jdk.jsobject,jdk.unsupported,jdk.unsupported.desktop,jdk.xml.dom,java.xml,java.management,jdk.localedata,java.sql,jdk.crypto.ec --output $INSTALL_DIR/jre

            cd $INSTALL_DIR
            zip -r stream-pi-client-linux-arm32-$VERSION-executable.zip *

      - name: Saving Linux ARM32 ZIP
        uses: actions/upload-artifact@v2
        with:
          name: linux-zip-arm32
          path: target/install/stream-pi-client-linux-arm32-${{ env.VERSION }}-executable.zip

  linux-aarch64-native:
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: sudo apt install g++-aarch64-linux-gnu axel libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev xdg-utils libc6 xdg-utils zlib1g libpng16-16 libasound2 libbsd-dev zip libblkid1 libdbus-1-3 libexpat1 libgpg-error0 liblzma5 libmount1 libpcre3 libselinux1 libsystemd0 libuuid1
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: adopt
          architecture: x64
      - name: Setup JavaFX
        run: |
          cd /tmp
          axel -n 8 https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+14_linux-x64_bin-jmods.zip
          unzip /tmp/openjfx-17-ea+14_linux-x64_bin-jmods.zip -d /tmp
      - name: Download GraalVM 21.1.0
        run: |
          cd /tmp
          axel -n 8 https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-linux-amd64-21.1.0.tar.gz
          tar -xvzf *.gz
      - name: Install native-image
        run: |
          cd /tmp/graalvm-ce-java11-21.1.0/bin
          ./gu install native-image
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Download build-date
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: build-date
          path: src/main/resources/com/stream_pi/client/
      - name: Create Linux aarch64
        run: |
          export GRAALVM_HOME=/tmp/graalvm-ce-java11-21.1.0/

          #Build aarch64 linux native-image

          mvn -Plinux-aarch64 gluonfx:build gluonfx:package
          mkdir $INSTALL_DIR
          mv target/gluonfx/aarch64-linux/client $INSTALL_DIR/client


          cp assets/launchers/aarch64-native/run_console $INSTALL_DIR/run_console
          cp assets/launchers/aarch64-native/run_desktop $INSTALL_DIR/run_desktop
          cp assets/linux-icon.png $INSTALL_DIR/app-icon.png
          chmod +x $INSTALL_DIR/run_desktop
          chmod +x $INSTALL_DIR/run_console

          cd $INSTALL_DIR
          zip -r stream-pi-client-linux-aarch64-${{ env.VERSION }}-native-executable.zip *
        env:
          MAIN_CLASS: com.stream_pi.client.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-17/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/stream-pi-client
      - name: Saving Linux aarch64 ZIP
        uses: actions/upload-artifact@v2
        with:
          name: linux-zip-aarch64-native
          path: target/stream-pi-client/stream-pi-client-linux-aarch64-${{ env.VERSION }}-native-executable.zip

  linux-aarch64-jvm:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2.1.0
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - uses: uraimo/run-on-arch-action@v2.0.10
        name: Build & save Linux aarch64 ZIP
        with:
          arch: aarch64
          distro: buster

          run: |
            apt -y update
            apt -y install axel unzip zip

            VERSION=$(<version.txt)
            INSTALL_DIR=target/install
            mkdir -p $INSTALL_DIR
            mv target/lib/* $INSTALL_DIR
            axel -k -n 8 https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+14_monocle-linux-aarch64_bin-sdk.zip
            unzip openjfx-17-ea+14_monocle-linux-aarch64_bin-sdk.zip -d javafx-sdk-aarch64
            mv javafx-sdk-aarch64/javafx-sdk-17/legal javafx-sdk-aarch64/javafx-sdk-17/javafx-legal

            # Use Debug libgluon
            mv javafx-sdk-aarch64/javafx-sdk-17/lib/libgluon_drm_debug-1.1.6.so javafx-sdk-aarch64/javafx-sdk-17/lib/libgluon_drm.so
            rm -rf javafx-sdk-aarch64/javafx-sdk-17/lib/libgluon_drm-1.1.6.so

            # Use Non Debug libgluon
            # mv javafx-sdk-aarch64/javafx-sdk-17/lib/libgluon_drm-1.1.6.so javafx-sdk-aarch64/javafx-sdk-17/lib/libgluon_drm.so
            # rm -rf javafx-sdk-aarch64/javafx-sdk-17/lib/libgluon_drm_debug-1.1.6.so

            mv javafx-sdk-aarch64/javafx-sdk-17/lib/* $INSTALL_DIR/
            cp assets/launchers/aarch64-jvm/run_console $INSTALL_DIR/run_console
            cp assets/launchers/aarch64-jvm/run_desktop $INSTALL_DIR/run_desktop
            cp assets/linux-icon.png $INSTALL_DIR/app-icon.png
            chmod +x $INSTALL_DIR/run_desktop
            chmod +x $INSTALL_DIR/run_console

            #Download jdk
            axel -k -n 8 https://cdn.azul.com/zulu/bin/zulu16.30.15-ca-jdk16.0.1-linux_aarch64.tar.gz
            tar -xvzf zulu16.30.15-ca-jdk16.0.1-linux_aarch64.tar.gz

            #Run jpackage
            zulu16.30.15-ca-jdk16.0.1-linux_aarch64/bin/jlink  --no-header-files --no-man-pages --add-modules java.base,java.logging,java.net.http,java.scripting,jdk.jsobject,jdk.unsupported,jdk.unsupported.desktop,jdk.xml.dom,java.xml,java.management,jdk.localedata,java.sql,jdk.crypto.ec --output $INSTALL_DIR/jre

            cd $INSTALL_DIR
            zip -r stream-pi-client-linux-aarch64-$VERSION-jvm-executable.zip *

      - name: Saving Linux aarch64 ZIP
        uses: actions/upload-artifact@v2
        with:
          name: linux-zip-aarch64-jvm
          path: target/install/stream-pi-client-linux-aarch64-${{ env.VERSION }}-jvm-executable.zip


